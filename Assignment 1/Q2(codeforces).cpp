// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡂⢸⠀⢀⣀⣤⣤⣤⣤⣄⡀⢰⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠘⣷⡿⠋⠀⣀⣀⣀⣈⡙⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠙⠁⠔⢻⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⢀⢈⠉⠹⠿⢿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⣰⡁⠀⠀⠹⣿⡎⠀⣀⣹⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⢹⡿⢷⣢⣤⡟⣧⣭⣶⣿⣽⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⢩⠙⠶⣬⡉⠇⣿⣿⣿⣿⡟⡿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠆⠆⠀⡈⠓⠠⣿⣿⣿⠟⣼⢡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠈⣴⠀⠐⢒⣲⣼⣿⣾⣆⣷⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡀⢌⠳⢄⠈⢀⣀⣼⣿⣿⣿⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⣿⣿⣿⣿⣷⡀⠛⣦⡙⠳⣶⣾⣿⣿⡇⢸⣿⣷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⣿⣿⣿⣿⣿⣿⡿⢿⣷⡄⠀⠙⢦⣤⣿⡟⠁⢱⡘⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⣠⣤⣼⣿⣶⣤⣀⠽⢿⡶⠤⠾⣷⣶⣿⣿⢿⣿⣿⠿⠿⣷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⣠⣾⡿⠟⠉⣉⣠⣴⣒⣀⣤⡤⠤⠤⣤⣶⣶⣶⡶⠟⠋⠁⠀⠀⢀⠁⠀⠀⠀⠈⠉⠓⢶⣶⣮⣝⠲⣤⣉⠛⠻⢿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⢀⣼⣿⡿⠖⠚⢉⣡⠴⠞⣉⡡⠴⢖⣫⣭⠶⢛⣿⣿⣤⣀⡀⠀⠀⠀⣸⣷⣿⡀⠀⠀⠀⣀⣼⣿⣿⣟⢿⣶⣿⣍⡓⠶⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⢹⣿⣧⣴⠶⣛⡫⠵⣒⣩⡤⠶⠚⠋⠁⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢻⣿⡿⣯⣑⠒⠾⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⢀⣿⣋⡵⢖⡩⠔⠚⠉⠁⠀⠀⠀⠀⡀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⠀⠈⣿⡇⠈⠻⢿⣝⡲⢿⣿⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⢘⣿⠏⣴⠃⠀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀⠙⠉⠀⠀⠀⠙⠿⠛⠛⢿⣿⣿⣿⠿⠛⠋⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠹⢿⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠸⣯⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠈⠻⣿⡇⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⢿⣿⣆⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠇⠀⠀⠀⠀⠀⢰⡿⠁⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⣿⠁⠈⠳⣄⠀⠀⠀⠀⠀⢹⣿⣿⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡀⠀⠀⠀⠀⢠⡿⣧⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⣾⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⠿⣝⠛⠳⠶⠤⠤⠤⠤⠤⠤⠤⠤⠶⣿⣿⡷⠦⠤⠤⠤⠤⠤⠤⢤⣴⣿⠉⠣⠀⠀⠀⠐⠉⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀
// ⠀⢠⣿⣿⣿⣦⡀⠀⢀⠀⠀⠀⠀⠀⢸⣏⠳⡀⠑⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⢀⠀⠀⠀⠀⢻⡟⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀
// ⠠⠛⠛⠿⣿⠿⣿⣷⣤⣱⣔⣄⠀⠀⣸⣿⣦⡈⠂⠀⠀⢀⣤⣾⠟⠁⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⢳⡄⠀⠀⣸⡇⠀⠀⠀⠀⠀⣠⣴⣾⡾⣿⣶⣦⣤⠀⠀⠀⠀
// ⠀⠀⠀⠀⠉⢠⠹⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣷⠶⠾⠿⣿⣿⠀⠀⠀⠀⠀⠀⢰⣿⣄⣀⣀⠀⠀⠈⣿⣦⣴⣿⣷⡀⠀⠀⢀⣼⣿⣿⡧⠀⠀⠀⠉⠛⠧⠀⠀⠀
// ⠀⠀⠀⠀⣰⡇⠀⠘⠛⠻⣿⠋⣿⠿⠀⠀⠻⡏⠀⠀⠀⠀⠈⣿⣆⣠⣤⣴⡤⠴⠿⠿⣿⠅⠀⠈⠑⢦⣿⣿⡿⠿⢿⣿⣶⣤⣿⣿⡯⢻⣷⢀⠴⢶⣦⡀⢠⣄⡀⠀
// ⠐⢶⣆⠀⢸⡇⠀⠤⠶⣾⣮⡁⠃⢀⣧⡀⠀⠠⣤⣀⣀⡀⠀⢿⡿⠟⠛⠏⠀⠀⠀⠀⠙⠀⠀⠀⠀⠛⢻⣿⡇⠀⠀⠈⠟⠻⢿⣿⠁⠀⠙⠃⠀⠘⣿⡿⠿⠛⠛⠒
// ⠀⠈⠿⠿⣿⠀⠀⠀⠀⠈⠻⣧⣴⡿⠟⠃⠀⣴⡏⠉⠻⢿⣦⠘⠁⠘⣄⠀⠀⠀⣠⡶⠊⢀⣀⣤⣤⣤⣄⣻⣿⡆⠀⠀⠀⣀⡄⠉⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⠋⠀⠀⠀⢸⡿⠁⠀⠀⡌⠙⠇⠀⠀⠻⢿⣆⢸⡿⠁⠀⠀⠀⠀⠉⠛⠛⠛⠿⠀⢀⣴⠟⠻⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣇⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠉⠻⠀⣀⣤⣶⣤⠄⠀⠀⠀⠀⠀⠀⣿⠟⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⠀⣾⣿⡀⣀⣀⣀⡀⠀⠀⠀⠀⠉⠁⢼⣧⣴⣤⡀⠀⠀⠀⠸⠃⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⠟⠛⠿⠛⠛⠉⠀⠀⠀⠀⠀⠀⠘⠋⠉⠉⠣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
#include<bits/stdc++.h>
using namespace std;
#define fo(i,n) for(i=0;i<n;i++)
#define Fo(i,k,n) for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)
#define ll long long
#define deb(x) cout << #x << "=" << x << endl
#define deb2(x, y) cout << #x << "=" << x << "," << #y << "=" << y << endl
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define all(x) x.begin(), x.end()
#define clr(x) memset(x, 0, sizeof(x))
#define sortall(x) sort(all(x))
#define tr(it, a) for(auto it = a.begin(); it != a.end(); it++)
#define PI 3.1415926535897932384626
typedef pair<int, int>	pii;
typedef pair<ll, ll>	pl;
typedef vector<int>		vi;
typedef vector<ll>		vl;
typedef vector<pii>		vpii;
typedef vector<pl>		vpl;
typedef vector<vi>		vvi;
typedef vector<vl>		vvl;
mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());
int rng(int lim) {
    uniform_int_distribution<int> uid(0,lim-1);
    return uid(rang);
}
const int mod = 1'000'000'007;
const int N = 3e5, M = N;
//=======================
 
vi g[N];
int arr[N];
 
void solve() {
    int i, j, n, m;
    int k,q;
    cin >> n >> k >> q;
    vi dist(k+1);
    vi time(k+1);
    for(int i = 1;i<=k;i++){
        cin >> dist[i];
    }
    for(int i = 1;i<=k;i++){
        cin >> time[i];
    }
    int x;
    while(q--){
        cin >> x;
        int low = 0,high = k;
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(dist[mid] <= x){
                ans = mid;
                low = mid + 1;
            }
            else high = mid - 1;
        }
        if(dist[ans] == x) cout << time[ans] << " ";
        else{
            ll fulltime = time[ans];
            fulltime += (ll)(x-dist[ans])*(time[ans+1] - time[ans])/(dist[ans+1] - dist[ans]);
            cout << fulltime << " ";
        }
    }
    cout << endl;
}
 
int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    srand(chrono::high_resolution_clock::now().time_since_epoch().count());
 
    int t = 1;
    cin >> t;
    while(t--) {
    solve();
    }
 
    return 0;
}